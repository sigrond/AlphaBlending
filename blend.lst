     1                                  section	.text
     2                                  global  _blend
     3                                  
     4                                  _blend:
     5 00000000 55                          push ebp
     6 00000001 89E5                    	mov ebp, esp
     7                                  
     8 00000003 8B5D08                      mov ebx, DWORD [ebp+8]  ;adres poczatku a
     9 00000006 8B4302                      mov eax, DWORD [ebx+2]  ;rozmiar a
    10 00000009 01C3                        add ebx, eax    ;adres konca a
    11 0000000B 53                          push ebx    ;[ebp-4]
    12                                  
    13 0000000C 8B5D0C                      mov ebx, DWORD [ebp+12]  ;adres poczatku b
    14 0000000F 8B4302                      mov eax, DWORD [ebx+2]  ;rozmiar b
    15 00000012 01C3                        add ebx, eax    ;adres konca b
    16 00000014 53                          push ebx    ;[ebp-8]
    17                                  
    18 00000015 8B5D08                  	mov ebx, DWORD [ebp+8]  ;adres poczatku a
    19 00000018 8B430A                  	mov eax, DWORD [ebx+10] ;offset a
    20 0000001B 01C3                    	add ebx, eax    ;adres pixeli(danych) a
    21 0000001D 8B4518                  	mov eax, DWORD [ebp+24] ;x
    22                                  ;load_x:
    23 00000020 6BC003                  	imul eax, 3    ;ilosc pixeli na ilosc bajtow
    24 00000023 01C3                    	add ebx, eax
    25 00000025 89C1                    	mov ecx, eax
    26 00000027 53                          push ebx    ;[ebp-12]
    27                                  
    28 00000028 8B5D0C                      mov ebx, DWORD [ebp+12]  ;adres poczatku b
    29 0000002B 8B430A                  	mov eax, DWORD [ebx+10] ;offset b
    30 0000002E 01C3                    	add ebx, eax    ;adres pixeli(danych) b
    31 00000030 53                          push ebx    ;[ebp-16]
    32                                  
    33 00000031 8B5D08                      mov ebx, DWORD [ebp+8]  ;adres poczatku a
    34 00000034 8B4312                      mov eax, DWORD [ebx+18]  ;szerokosc a
    35 00000037 6BC003                      imul eax, 3 ;zamiana szerokosci, pixele na bajty
    36 0000003A 89C2                        mov edx, eax
    37 0000003C 6BC008                      imul eax, 8 ;zamiana szerokosci, bajty na bity
    38 0000003F 83C01F                      add eax, 31 ;dlugosc_lini+=31
    39 00000042 C1E805                      shr eax, 5  ;dlugosc_lini/=32
    40 00000045 C1E002                      shl eax, 2  ;dlugosc_lini*=4
    41 00000048 29D0                        sub eax, edx    ;padding
    42 0000004A 50                          push eax    ;[ebp-20]
    43                                  
    44 0000004B 8B5D08                      mov ebx, DWORD [ebp+8]  ;adres poczatku a
    45 0000004E 035B0A                  	add ebx, DWORD [ebx+10] ;offset a
    46 00000051 01D3                        add ebx, edx    ;adres ostatniego bajtu pixeli w lini
    47 00000053 53                          push ebx    ;[ebp-24]
    48                                  
    49 00000054 8B5D0C                      mov ebx, DWORD [ebp+12]  ;adres poczatku b
    50 00000057 8B4312                      mov eax, DWORD [ebx+18]  ;szerokosc b
    51 0000005A 6BC003                      imul eax, 3 ;zamiana szerokosci, pixele na bajty
    52 0000005D 89C2                        mov edx, eax
    53 0000005F 6BC008                      imul eax, 8 ;zamiana szerokosci, bajty na bity
    54 00000062 83C01F                      add eax, 31 ;dlugosc_lini+=31
    55 00000065 C1E805                      shr eax, 5  ;dlugosc_lini/=32
    56 00000068 C1E002                      shl eax, 2  ;dlugosc_lini*=4
    57 0000006B 29D0                        sub eax, edx    ;padding
    58 0000006D 50                          push eax    ;[ebp-28]
    59                                  
    60 0000006E 8B5DF0                      mov ebx, DWORD [ebp-16]  ;adres danych b
    61 00000071 01D3                        add ebx, edx    ;adres ostatniego bajtu pixeli w lini
    62 00000073 53                          push ebx    ;[ebp-32]
    63                                  ;szerokosc:
    64 00000074 8B5D08                      mov ebx, DWORD [ebp+8]  ;adres poczatku a
    65 00000077 8B4312                      mov eax, DWORD [ebx+18]  ;szerokosc a
    66 0000007A 6BC003                      imul eax, 3 ;zamiana szerokosci, pixele na bajty
    67 0000007D 50                          push eax    ;[ebp-36]
    68 0000007E 8B55EC                      mov edx, DWORD [ebp-20] ;padding a
    69                                  ;wez_padding:
    70 00000081 01D0                        add eax, edx    ;dlugosc lini z paddingiem
    71 00000083 8B551C                      mov edx, [ebp+28]   ;y
    72                                  ;load_y:
    73 00000086 0FAFC2                      imul eax, edx   ;przesuniecie w pionie
    74 00000089 8B5DF4                      mov	ebx, DWORD [ebp-12] ;poczatek danych a
    75 0000008C 01C3                        add ebx, eax    ;adres po przesunieciu w dol
    76 0000008E 895DF4                      mov [ebp-12], ebx
    77 00000091 01C1                        add ecx, eax
    78 00000093 8B5D08                      mov ebx, DWORD [ebp+8]  ;adres poczatku a
    79 00000096 8B430A                  	mov eax, DWORD [ebx+10] ;offset a
    80 00000099 01C1                        add ecx, eax  ;licznik
    81                                  
    82 0000009B 39C1                        cmp ecx, eax
    83 0000009D 7D02                        jge nie_zmien
    84 0000009F 89C1                        mov ecx, eax
    85                                  nie_zmien:
    86                                  
    87 000000A1 8B5D0C                      mov ebx, DWORD [ebp+12]  ;adres poczatku b
    88 000000A4 8B4312                      mov eax, DWORD [ebx+18]  ;szerokosc b
    89 000000A7 6BC003                      imul eax, 3 ;zamiana szerokosci, pixele na bajty
    90 000000AA 50                          push eax    ;[ebp-40]
    91                                  
    92 000000AB B800000000                  mov eax, 0
    93 000000B0 50                          push eax    ;[ebp-44]
    94                                  
    95                                  loop1:
    96 000000B1 8B5DF4                      mov	ebx, DWORD [ebp-12] ;poczatek danych a
    97 000000B4 B800000000                  mov eax, 0
    98 000000B9 8A03                        mov al, BYTE [ebx]  ;weź bit koloru
    99 000000BB 8B5D14                      mov	ebx, DWORD [ebp+20] ;poczatek danych a
   100 000000BE 01CB                        add ebx, ecx
   101 000000C0 BA00000000                  mov edx, 0
   102 000000C5 8A13                        mov dl, BYTE [ebx]  ;weź bit koloru
   103                                  testuj:
   104                                  
   105 000000C7 8B5DF4                      mov	ebx, DWORD [ebp-12] ;poczatek danych a
   106 000000CA B800000000                  mov eax, 0
   107 000000CF 8A03                        mov al, BYTE [ebx]  ;weź bit koloru
   108 000000D1 25FF000000                  and eax, 0xFF    ;maska
   109                                  
   110 000000D6 8945D4                      mov [ebp-44], eax
   111 000000D9 DB45D4                      fild DWORD [ebp-44]    ;bajt koloru na stos FPU
   112 000000DC D94510                      fld DWORD [ebp+16] ;(float)alfa na stos FPU
   113 000000DF DEC9                        fmulp   ;mnozenie- wynik na stos FPU
   114                                  
   115 000000E1 D9E8                        fld1    ;1 na stos
   116 000000E3 D94510                      fld DWORD [ebp+16] ;(float)alfa na stos FPU
   117 000000E6 DEE9                        fsubp   ;1-alfa
   118                                  
   119 000000E8 43                          inc ebx
   120 000000E9 895DF4                      mov [ebp-12], ebx
   121                                  
   122 000000EC 8B5DF0                      mov ebx, DWORD [ebp-16] ;poczatek danych b
   123 000000EF B800000000                  mov eax, 0
   124 000000F4 8A03                        mov al, BYTE [ebx]  ;weź bit koloru
   125 000000F6 25FF000000                  and eax, 0xFF    ;maska
   126 000000FB 8945D4                      mov [ebp-44], eax
   127 000000FE DB45D4                      fild DWORD [ebp-44]    ;bajt koloru na stos FPU
   128 00000101 DEC9                        fmulp   ;mnozenie- wynik na stos FPU
   129 00000103 DEC1                        faddp   ;dodanie
   130 00000105 DB5DD4                      fistp DWORD [ebp-44]   ;zdjecie ze stosu jako int
   131 00000108 8B45D4                      mov eax, DWORD [ebp-44]
   132                                  
   133 0000010B 43                          inc ebx
   134 0000010C 895DF0                      mov [ebp-16], ebx
   135                                  
   136 0000010F 8B5D14                      mov ebx, DWORD [ebp+20] ;*d
   137 00000112 01CB                        add ebx, ecx
   138 00000114 8803                        mov BYTE [ebx], al  ;zapis
   139 00000116 41                          inc ecx
   140                                  
   141 00000117 8B45F4                      mov eax, DWORD [ebp-12] ;aktualny wskaznik a
   142 0000011A 8B5DE8                      mov ebx, DWORD [ebp-24] ;aktualny koniec lini
   143 0000011D 39D8                        cmp eax, ebx
   144 0000011F 7F24                        jg przeskocz_padding
   145                                  
   146 00000121 8B45F0                      mov eax, DWORD [ebp-16] ;aktualny wskaznik b
   147 00000124 8B5DE0                      mov ebx, DWORD [ebp-32] ;aktualny koniec lini
   148 00000127 39D8                        cmp eax, ebx
   149 00000129 7F1A                        jg przeskocz_padding
   150                                  
   151 0000012B 8B45F4                      mov eax, DWORD [ebp-12] ;aktualny wskaznik a
   152 0000012E 8B5DFC                      mov ebx, DWORD [ebp-4]  ;koniec a
   153 00000131 39D8                        cmp eax, ebx
   154 00000133 7F5A                        jg koniec  ;jesli skonczy sie plik podstawowy, to koniec
   155                                  
   156 00000135 8B45F0                      mov eax, DWORD [ebp-16] ;aktualny wskaznik b
   157 00000138 8B5DF8                      mov ebx, DWORD [ebp-8]  ;koniec b
   158 0000013B 39D8                        cmp eax, ebx
   159 0000013D 0F8E6EFFFFFF                jle loop1   ;jesli nie skonczyl sie jeszcze plik nakladany, to powtarzaj
   160                                  
   161 00000143 EB4A                        jmp koniec  ;koniec funkcji
   162                                  
   163                                  przeskocz_padding:
   164 00000145 8B45F4                      mov eax, DWORD [ebp-12]
   165 00000148 8B5DE8                      mov ebx, DWORD [ebp-24] ;aktualny koniec lini a
   166 0000014B 29C3                        sub ebx, eax
   167 0000014D 035DEC                      add ebx, DWORD [ebp-20] ;+ padding
   168 00000150 01D9                        add ecx, ebx
   169                                  
   170 00000152 8B5DE8                      mov ebx, DWORD [ebp-24] ;aktualny koniec lini a
   171 00000155 035DEC                      add ebx, DWORD [ebp-20] ;+ padding
   172 00000158 8B4518                      mov eax, DWORD [ebp+24] ;x
   173 0000015B 6BC003                      imul eax, 3    ;ilosc pixeli na ilosc bajtow
   174 0000015E 01C1                        add ecx, eax
   175 00000160 01C3                    	add ebx, eax
   176                                      ;inc ebx
   177 00000162 895DF4                      mov [ebp-12], ebx
   178                                  
   179 00000165 8B5DE0                      mov ebx, DWORD [ebp-32] ;aktualny koniec lini b
   180 00000168 035DE4                      add ebx, DWORD [ebp-28] ;+ padding
   181                                      ;inc ebx
   182 0000016B 895DF0                      mov [ebp-16], ebx
   183                                  
   184 0000016E 8B5DE8                      mov ebx, DWORD [ebp-24] ;aktualny koniec lini a
   185 00000171 8B45DC                      mov eax, DWORD [ebp-36] ;dlugosc lini w bajtach
   186 00000174 0345EC                      add eax, DWORD [ebp-20] ;+ padding
   187 00000177 01C3                        add ebx, eax    ;nowy adres konca linii
   188 00000179 895DE8                      mov [ebp-24], ebx
   189                                  
   190 0000017C 8B5DE0                      mov ebx, DWORD [ebp-32] ;aktualny koniec lini b
   191 0000017F 8B45D8                      mov eax, DWORD [ebp-40] ;dlugosc lini w bajtach
   192 00000182 0345E4                      add eax, DWORD [ebp-28] ;+ padding
   193 00000185 01C3                        add ebx, eax    ;nowy adres konca linii
   194 00000187 895DE0                      mov [ebp-32], ebx
   195                                  
   196 0000018A E922FFFFFF                  jmp loop1
   197                                  
   198                                  
   199                                  koniec:
   200 0000018F B800000000              	mov	eax, 0		;return 0
   201 00000194 89EC                    	mov esp, ebp
   202 00000196 5D                      	pop	ebp
   203 00000197 C3                      	ret
   204                                  
