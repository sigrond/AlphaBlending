     1                                  section	.text
     2                                  global  _blend
     3                                  
     4                                  _blend:
     5 00000000 55                          push ebp
     6 00000001 89E5                    	mov ebp, esp
     7                                  
     8 00000003 8B5D08                      mov ebx, DWORD [ebp+8]  ;adres poczatku a
     9 00000006 8B4302                      mov eax, DWORD [ebx+2]  ;rozmiar a
    10 00000009 01C3                        add ebx, eax    ;adres konca a
    11 0000000B 53                          push ebx    ;[ebp-4]
    12                                  
    13 0000000C 8B5D0C                      mov ebx, DWORD [ebp+12]  ;adres poczatku b
    14 0000000F 8B4302                      mov eax, DWORD [ebx+2]  ;rozmiar b
    15 00000012 01C3                        add ebx, eax    ;adres konca b
    16 00000014 53                          push ebx    ;[ebp-8]
    17                                  
    18 00000015 8B5D08                  	mov ebx, DWORD [ebp+8]  ;adres poczatku a
    19 00000018 8B430A                  	mov eax, DWORD [ebx+10] ;offset a
    20 0000001B 01C3                    	add ebx, eax    ;adres pixeli(danych) a
    21 0000001D 8B4518                  	mov eax, DWORD [ebp+24] ;x
    22                                  load_x:
    23 00000020 6BC003                  	imul eax, 3    ;ilosc pixeli na ilosc bajtow
    24 00000023 01C3                    	add ebx, eax
    25 00000025 53                          push ebx    ;[ebp-12]
    26                                  
    27 00000026 8B5D0C                      mov ebx, DWORD [ebp+12]  ;adres poczatku b
    28 00000029 8B430A                  	mov eax, DWORD [ebx+10] ;offset b
    29 0000002C 01C3                    	add ebx, eax    ;adres pixeli(danych) b
    30 0000002E 53                          push ebx    ;[ebp-16]
    31                                  
    32 0000002F 8B5D08                      mov ebx, DWORD [ebp+8]  ;adres poczatku a
    33 00000032 8B4312                      mov eax, DWORD [ebx+18]  ;szerokosc a
    34 00000035 6BC003                      imul eax, 3 ;zamiana szerokosci, pixele na bajty
    35 00000038 89C2                        mov edx, eax
    36 0000003A 6BC008                      imul eax, 8 ;zamiana szerokosci, bajty na bity
    37 0000003D 83C01F                      add eax, 31 ;dlugosc_lini+=31
    38 00000040 C1E805                      shr eax, 5  ;dlugosc_lini/=32
    39 00000043 C1E002                      shl eax, 2  ;dlugosc_lini*=4
    40 00000046 29D0                        sub eax, edx    ;padding
    41 00000048 50                          push eax    ;[ebp-20]
    42                                  
    43 00000049 8B5DF4                      mov ebx, DWORD [ebp-12]  ;adres danych a
    44 0000004C 01D3                        add ebx, edx    ;adres ostatniego bajtu pixeli w lini
    45 0000004E 53                          push ebx    ;[ebp-24]
    46                                  
    47 0000004F 8B5D0C                      mov ebx, DWORD [ebp+12]  ;adres poczatku b
    48 00000052 8B4312                      mov eax, DWORD [ebx+18]  ;szerokosc b
    49 00000055 6BC003                      imul eax, 3 ;zamiana szerokosci, pixele na bajty
    50 00000058 89C2                        mov edx, eax
    51 0000005A 6BC008                      imul eax, 8 ;zamiana szerokosci, bajty na bity
    52 0000005D 83C01F                      add eax, 31 ;dlugosc_lini+=31
    53 00000060 C1E805                      shr eax, 5  ;dlugosc_lini/=32
    54 00000063 C1E002                      shl eax, 2  ;dlugosc_lini*=4
    55 00000066 29D0                        sub eax, edx    ;padding
    56 00000068 50                          push eax    ;[ebp-28]
    57                                  
    58 00000069 8B5DF0                      mov ebx, DWORD [ebp-16]  ;adres danych b
    59 0000006C 01D3                        add ebx, edx    ;adres ostatniego bajtu pixeli w lini
    60 0000006E 53                          push ebx    ;[ebp-32]
    61                                  
    62 0000006F 8B5D08                      mov ebx, DWORD [ebp+8]  ;adres poczatku a
    63 00000072 8B4312                      mov eax, DWORD [ebx+18]  ;szerokosc a
    64 00000075 6BC003                      imul eax, 3 ;zamiana szerokosci, pixele na bajty
    65 00000078 50                          push eax    ;[ebp-36]
    66 00000079 8B55E8                      mov edx, DWORD [ebp-24] ;padding a
    67 0000007C 01D0                        add eax, edx    ;dlugosc lini z paddingiem
    68                                  load_y:
    69 0000007E 8B551C                      mov edx, [ebp+28]   ;y
    70 00000081 0FAFC2                      imul eax, edx   ;przesuniecie w pionie
    71 00000084 8B5DF4                      mov	ebx, DWORD [ebp-12] ;poczatek danych a
    72 00000087 01C3                        add ebx, eax    ;adres po przesunieciu w dol
    73 00000089 895DF4                      mov [ebp-12], ebx
    74                                  
    75                                  
    76 0000008C 8B5D0C                      mov ebx, DWORD [ebp+12]  ;adres poczatku b
    77 0000008F 8B4312                      mov eax, DWORD [ebx+18]  ;szerokosc b
    78 00000092 6BC003                      imul eax, 3 ;zamiana szerokosci, pixele na bajty
    79 00000095 50                          push eax    ;[ebp-40]
    80                                  
    81 00000096 8B5D08                      mov ebx, DWORD [ebp+8]  ;adres poczatku a
    82 00000099 8B430A                  	mov eax, DWORD [ebx+10] ;offset a
    83 0000009C 89C1                        mov ecx, eax  ;licznik
    84                                  
    85 0000009E B800000000                  mov eax, 0
    86 000000A3 50                          push eax    ;[ebp-44]
    87                                  
    88                                  loop1:
    89 000000A4 8B5DF4                      mov	ebx, DWORD [ebp-12] ;poczatek danych a
    90 000000A7 B800000000                  mov eax, 0
    91 000000AC 8A03                        mov al, BYTE [ebx]  ;weź bit koloru
    92 000000AE 25FF000000                  and eax, 0xFF    ;maska
    93                                  
    94 000000B3 8945D4                      mov [ebp-44], eax
    95 000000B6 DB45D4                      fild DWORD [ebp-44]    ;bajt koloru na stos FPU
    96 000000B9 D94510                      fld DWORD [ebp+16] ;(float)alfa na stos FPU
    97 000000BC DEC9                        fmulp   ;mnozenie- wynik na stos FPU
    98                                      ;fistp DWORD [ebp-44]   ;zdjecie ze stosu jako int
    99                                      ;mov edx, DWORD [ebp-44]
   100                                  
   101 000000BE D9E8                        fld1    ;1 na stos
   102                                      ;mov eax, DWORD [ebp+16] ;alfa
   103 000000C0 D94510                      fld DWORD [ebp+16] ;(float)alfa na stos FPU
   104 000000C3 DEE9                        fsubp   ;1-alfa
   105                                  
   106 000000C5 43                          inc ebx
   107 000000C6 895DF4                      mov [ebp-12], ebx
   108                                  
   109 000000C9 8B5DF0                      mov ebx, DWORD [ebp-16] ;poczatek danych b
   110                                      ;add ebx, ecx
   111 000000CC B800000000                  mov eax, 0
   112 000000D1 8A03                        mov al, BYTE [ebx]  ;weź bit koloru
   113 000000D3 25FF000000                  and eax, 0xFF    ;maska
   114 000000D8 8945D4                      mov [ebp-44], eax
   115 000000DB DB45D4                      fild DWORD [ebp-44]    ;bajt koloru na stos FPU
   116 000000DE DEC9                        fmulp   ;mnozenie- wynik na stos FPU
   117                                      ;mov [ebp-44], edx
   118 000000E0 DEC1                        faddp   ;dodanie
   119                                      ;fistp DWORD [eax]   ;zdjecie ze stosu jako int
   120 000000E2 DB5DD4                      fistp DWORD [ebp-44]   ;zdjecie ze stosu jako int
   121                                      ;add eax, edx    ;nowa wartosc koloru
   122 000000E5 8B45D4                      mov eax, DWORD [ebp-44]
   123                                  
   124                                  
   125 000000E8 43                          inc ebx
   126 000000E9 895DF0                      mov [ebp-16], ebx
   127                                  
   128 000000EC 8B5D14                      mov ebx, DWORD [ebp+20] ;*d
   129 000000EF 01CB                        add ebx, ecx
   130 000000F1 8803                        mov BYTE [ebx], al  ;zapis
   131 000000F3 41                          inc ecx
   132                                  
   133 000000F4 8B45F4                      mov eax, DWORD [ebp-12] ;aktualny wskaznik a
   134 000000F7 8B5DE8                      mov ebx, DWORD [ebp-24] ;aktualny koniec lini
   135 000000FA 39D8                        cmp eax, ebx
   136 000000FC 7D20                        jge przeskocz_padding
   137                                  
   138 000000FE 8B45F0                      mov eax, DWORD [ebp-16] ;aktualny wskaznik b
   139 00000101 8B5DE0                      mov ebx, DWORD [ebp-32] ;aktualny koniec lini
   140 00000104 39D8                        cmp eax, ebx
   141 00000106 7D16                        jge przeskocz_padding
   142                                  
   143 00000108 8B45F4                      mov eax, DWORD [ebp-12] ;aktualny wskaznik a
   144 0000010B 8B5DFC                      mov ebx, DWORD [ebp-4]  ;koniec a
   145 0000010E 39D8                        cmp eax, ebx
   146 00000110 7F40                        jg koniec  ;jesli skonczy sie plik podstawowy, to koniec
   147                                  
   148 00000112 8B45F0                      mov eax, DWORD [ebp-16] ;aktualny wskaznik b
   149 00000115 8B5DF8                      mov ebx, DWORD [ebp-8]  ;koniec b
   150 00000118 39D8                        cmp eax, ebx
   151 0000011A 7E88                        jle loop1   ;jesli nie skonczyl sie jeszcze plik nakladany, to powtarzaj
   152                                  
   153 0000011C EB34                        jmp koniec  ;koniec funkcji
   154                                  
   155                                  przeskocz_padding:
   156 0000011E 8B5DE8                      mov ebx, DWORD [ebp-24] ;aktualny koniec lini a
   157 00000121 035DEC                      add ebx, DWORD [ebp-20] ;+ padding
   158 00000124 8B4518                      mov eax, DWORD [ebp+24] ;x
   159 00000127 01C3                    	add ebx, eax
   160 00000129 43                          inc ebx
   161 0000012A 895DF4                      mov [ebp-12], ebx
   162                                  
   163 0000012D 8B5DE0                      mov ebx, DWORD [ebp-32] ;aktualny koniec lini b
   164 00000130 035DE4                      add ebx, DWORD [ebp-28] ;+ padding
   165 00000133 43                          inc ebx
   166 00000134 895DF0                      mov [ebp-16], ebx
   167                                  
   168 00000137 8B5DE8                      mov ebx, DWORD [ebp-24] ;aktualny koniec lini a
   169 0000013A 8B45DC                      mov eax, DWORD [ebp-36] ;dlugosc lini w bajtach
   170 0000013D 01C3                        add ebx, eax    ;nowy adres konca linii
   171 0000013F 895DE8                      mov [ebp-24], ebx
   172                                  
   173 00000142 8B5DE0                      mov ebx, DWORD [ebp-32] ;aktualny koniec lini b
   174 00000145 8B45D8                      mov eax, DWORD [ebp-40] ;dlugosc lini w bajtach
   175 00000148 01C3                        add ebx, eax    ;nowy adres konca linii
   176 0000014A 895DE0                      mov [ebp-32], ebx
   177                                  
   178 0000014D E952FFFFFF                  jmp loop1
   179                                  
   180                                  
   181                                  koniec:
   182 00000152 B800000000              	mov	eax, 0		;return 0
   183 00000157 89EC                    	mov esp, ebp
   184 00000159 5D                      	pop	ebp
   185 0000015A C3                      	ret
   186                                  
